-- MERGE generated by running the 'sp_generate_merge' 
-- For more info: https://github.com/readyroll/generate-sql-merge

 --EXEC sp_generate_merge
 --    @table_name ='User',
 --    @top='3'


USE [SatRecruitmentDb]
GO

--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [User] ON

MERGE INTO [User] AS [Target]
USING (VALUES
  (1,N'Juan',N'Juan@marmol.com',N'string',N'+5491154762312',N'Peru 2464',N'Normal',1.0000)
 ,(2,N'Franco',N'Franco.Perez@gmail.com',N'string',N'+534645213542',N'Alvear y Colombres',N'Premium',112234.0000)
 ,(3,N'Agustina',N'Agustina@gmail.com',N'string',N'+534645213543',N'Garay y Otra Calle',N'SuperUser',112234.0000)
) AS [Source] ([Id],[Name],[Email],[Password],[Phone],[Address],[UserType],[Money])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[Name], [Target].[Name]) IS NOT NULL OR NULLIF([Target].[Name], [Source].[Name]) IS NOT NULL OR 
	NULLIF([Source].[Email], [Target].[Email]) IS NOT NULL OR NULLIF([Target].[Email], [Source].[Email]) IS NOT NULL OR 
	NULLIF([Source].[Password], [Target].[Password]) IS NOT NULL OR NULLIF([Target].[Password], [Source].[Password]) IS NOT NULL OR 
	NULLIF([Source].[Phone], [Target].[Phone]) IS NOT NULL OR NULLIF([Target].[Phone], [Source].[Phone]) IS NOT NULL OR 
	NULLIF([Source].[Address], [Target].[Address]) IS NOT NULL OR NULLIF([Target].[Address], [Source].[Address]) IS NOT NULL OR 
	NULLIF([Source].[UserType], [Target].[UserType]) IS NOT NULL OR NULLIF([Target].[UserType], [Source].[UserType]) IS NOT NULL OR 
	NULLIF([Source].[Money], [Target].[Money]) IS NOT NULL OR NULLIF([Target].[Money], [Source].[Money]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[Name] = [Source].[Name], 
  [Target].[Email] = [Source].[Email], 
  [Target].[Password] = [Source].[Password], 
  [Target].[Phone] = [Source].[Phone], 
  [Target].[Address] = [Source].[Address], 
  [Target].[UserType] = [Source].[UserType], 
  [Target].[Money] = [Source].[Money]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Name],[Email],[Password],[Phone],[Address],[UserType],[Money])
 VALUES([Source].[Id],[Source].[Name],[Source].[Email],[Source].[Password],[Source].[Phone],[Source].[Address],[Source].[UserType],[Source].[Money])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [User]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[User] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO



SET IDENTITY_INSERT [User] OFF
SET NOCOUNT OFF
GO
